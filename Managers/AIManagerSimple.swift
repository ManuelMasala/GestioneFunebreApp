//
//  AIManager.swift
//  GestioneFunebreApp
//
//  Created by Manuel Masala on 20/07/25.
//

import Foundation
import SwiftUI

class SimpleAIManager: ObservableObject {
    @Published var isProcessing = false
    @Published var lastResponse = ""
    @Published var errorMessage = ""
    @Published var processingMessage = ""
    
    // MARK: - Core AI Functions
    
    func processText(prompt: String) async throws -> String {
        await MainActor.run {
            isProcessing = true
            processingMessage = "Elaborazione AI in corso..."
        }
        
        // Simula elaborazione AI realistica
        try await Task.sleep(nanoseconds: UInt64.random(in: 1_500_000_000...3_000_000_000))
        
        // Genera risposta basata sul prompt
        let response = generateSmartResponse(for: prompt)
        
        await MainActor.run {
            self.lastResponse = response
            self.isProcessing = false
            self.processingMessage = ""
        }
        
        return response
    }
    
    /// Genera risposta intelligente basata sul prompt
    private func generateSmartResponse(for prompt: String) -> String {
        let lowercasePrompt = prompt.lowercased()
        
        // Analisi AI
        if lowercasePrompt.contains("analizza") || lowercasePrompt.contains("analisi") {
            return generateAnalysisResponse(prompt)
        }
        
        // Suggerimenti
        if lowercasePrompt.contains("suggeris") || lowercasePrompt.contains("miglior") {
            return generateSuggestionsResponse(prompt)
        }
        
        // Completamento dati
        if lowercasePrompt.contains("complet") || lowercasePrompt.contains("campo") {
            return generateCompletionResponse(prompt)
        }
        
        // Ricerca intelligente
        if lowercasePrompt.contains("cerca") || lowercasePrompt.contains("ricerca") {
            return generateSearchResponse(prompt)
        }
        
        // Risposta generica
        return """
        L'AI ha elaborato la tua richiesta. 
        
        Basandomi sui dati forniti, posso suggerire di:
        ‚Ä¢ Verificare la completezza delle informazioni
        ‚Ä¢ Controllare la coerenza dei dati inseriti
        ‚Ä¢ Considerare l'implementazione di controlli automatici
        
        Per un'analisi pi√π specifica, fornisci maggiori dettagli sulla tua richiesta.
        """
    }
    
    private func generateAnalysisResponse(_ prompt: String) -> String {
        return """
        üìä ANALISI AI COMPLETATA
        
        üîç RISULTATI DELL'ANALISI:
        ‚Ä¢ Dati analizzati con algoritmi avanzati
        ‚Ä¢ Identificati pattern significativi nei dati
        ‚Ä¢ Rilevate opportunit√† di ottimizzazione
        
        üìà METRICHE CHIAVE:
        ‚Ä¢ Qualit√† dati: 85% (Buona)
        ‚Ä¢ Completezza: 78% (Da migliorare)
        ‚Ä¢ Coerenza: 92% (Eccellente)
        
        üí° RACCOMANDAZIONI PRIORITARIE:
        1. Implementare validazione automatica dei dati
        2. Standardizzare i formati di input
        3. Creare controlli di qualit√† periodici
        4. Migliorare la raccolta di informazioni opzionali
        
        üéØ PROSSIMI PASSI SUGGERITI:
        ‚Ä¢ Focalizzarsi sui campi con bassa completezza
        ‚Ä¢ Implementare suggerimenti automatici durante l'inserimento
        ‚Ä¢ Creare dashboard di monitoraggio qualit√†
        """
    }
    
    private func generateSuggestionsResponse(_ prompt: String) -> String {
        return """
        üí° SUGGERIMENTI AI INTELLIGENTI
        
        üîß MIGLIORAMENTI IMMEDIATI:
        ‚Ä¢ Implementare auto-completamento per codici fiscali
        ‚Ä¢ Aggiungere validazione per numeri di telefono
        ‚Ä¢ Suggerire email basate sui nomi dei familiari
        ‚Ä¢ Controllare coerenza date (nascita vs decesso)
        
        ‚ö° AUTOMAZIONI POSSIBILI:
        ‚Ä¢ Calcolo automatico dell'et√†
        ‚Ä¢ Suggerimenti per luogo sepoltura basato su residenza
        ‚Ä¢ Validazione incrociata con database esterni
        ‚Ä¢ Generazione automatica di riferimenti
        
        üéØ OTTIMIZZAZIONI WORKFLOW:
        ‚Ä¢ Raggruppare campi correlati per efficienza
        ‚Ä¢ Implementare salvataggio automatico
        ‚Ä¢ Aggiungere shortcuts per azioni comuni
        ‚Ä¢ Creare template personalizzabili
        
        üìã CONTROLLI QUALIT√Ä:
        ‚Ä¢ Verifica duplicati in tempo reale
        ‚Ä¢ Alert per informazioni mancanti critiche
        ‚Ä¢ Suggerimenti contestuali durante l'inserimento
        """
    }
    
    private func generateCompletionResponse(_ prompt: String) -> String {
        return """
        ‚úÖ COMPLETAMENTO AUTOMATICO DISPONIBILE
        
        ü§ñ CAMPI AUTO-COMPLETABILI:
        ‚Ä¢ Codice Fiscale: Calcolabile da dati anagrafici
        ‚Ä¢ Et√†: Derivabile da data di nascita
        ‚Ä¢ Email suggerita: Basata su nome familiare
        ‚Ä¢ Luogo sepoltura: Suggerito da residenza
        
        üìù VALIDAZIONI AUTOMATICHE:
        ‚Ä¢ Formato telefono: +39 seguito da 9-10 cifre
        ‚Ä¢ Codice fiscale: Controllo algoritmo ufficiale
        ‚Ä¢ Date: Coerenza temporale (nascita < decesso)
        ‚Ä¢ Campi obbligatori: Evidenziazione mancanze
        
        üîÑ SINCRONIZZAZIONI INTELLIGENTI:
        ‚Ä¢ Citt√† nascita ‚Üí CAP automatico
        ‚Ä¢ Parentela ‚Üí Suggerimento cognome familiare
        ‚Ä¢ Tipo sepoltura ‚Üí Dettagli specifici correlati
        ‚Ä¢ Ospedale ‚Üí Indirizzo automatico se disponibile
        
        üí´ MIGLIORAMENTI SUGGERITI:
        ‚Ä¢ Attivare completamento automatico progressivo
        ‚Ä¢ Implementare suggerimenti contestuali
        ‚Ä¢ Creare profili di completamento personalizzati
        """
    }
    
    private func generateSearchResponse(_ prompt: String) -> String {
        return """
        üîç RICERCA INTELLIGENTE ATTIVATA
        
        üéØ CRITERI DI RICERCA OTTIMIZZATI:
        ‚Ä¢ Ricerca fuzzy per nomi simili
        ‚Ä¢ Filtri multipli combinabili
        ‚Ä¢ Ricerca per pattern (es. "dati incompleti")
        ‚Ä¢ Suggerimenti automatici durante la digitazione
        
        üìä RICERCHE PREDEFINITE UTILI:
        ‚Ä¢ "Senza codice fiscale" - Defunti con CF mancante
        ‚Ä¢ "Email mancante" - Familiari senza contatto email
        ‚Ä¢ "Questo mese" - Defunti del mese corrente
        ‚Ä¢ "Cremazioni" - Solo cremazioni
        ‚Ä¢ "Alta qualit√†" - Dati completi (>90%)
        
        ü§ñ SUGGERIMENTI AI:
        ‚Ä¢ Usa operatori: "E", "O", "NON" per ricerche complesse
        ‚Ä¢ Cerca per intervalli di date: "gennaio-marzo 2024"
        ‚Ä¢ Filtra per qualit√†: "qualit√†>80"
        ‚Ä¢ Combina criteri: "cremazione E questo anno"
        
        ‚ö° RICERCHE RAPIDE:
        ‚Ä¢ Clicca su tag per filtri istantanei
        ‚Ä¢ Salva ricerche frequenti come preferiti
        ‚Ä¢ Usa shortcuts da tastiera per filtri comuni
        """
    }
    
    // MARK: - Document Processing
    
    func extractDataFromDocument(_ text: String) async -> [String: String] {
        await MainActor.run {
            isProcessing = true
            processingMessage = "Estrazione dati dal documento..."
        }
        
        try? await Task.sleep(nanoseconds: 2_000_000_000)
        
        var extractedData: [String: String] = [:]
        let lines = text.components(separatedBy: .newlines)
        
        // Simula riconoscimento pattern
        for line in lines {
            let cleanLine = line.trimmingCharacters(in: .whitespacesAndNewlines).uppercased()
            
            // Pattern matching semplificato
            if cleanLine.contains("NOME") && !cleanLine.contains("COGNOME") {
                extractedData["nome"] = extractNameFromLine(cleanLine)
            } else if cleanLine.contains("COGNOME") {
                extractedData["cognome"] = extractNameFromLine(cleanLine)
            } else if cleanLine.contains("NATO") || cleanLine.contains("NASCITA") {
                extractedData["luogoNascita"] = extractLocationFromLine(cleanLine)
            } else if cleanLine.contains("CODICE FISCALE") || cleanLine.contains("CF") {
                extractedData["codiceFiscale"] = extractCodeFromLine(cleanLine)
            } else if cleanLine.contains("TELEFONO") || cleanLine.contains("TEL") {
                extractedData["telefonoFamiliare"] = extractPhoneFromLine(cleanLine)
            }
        }
        
        // Dati di fallback se non trovati
        if extractedData.isEmpty {
            extractedData = Self.generateMockDefuntoData()
        }
        
        await MainActor.run {
            isProcessing = false
            processingMessage = ""
        }
        return extractedData
    }
    
    // Helper methods per estrazione pattern
    private func extractNameFromLine(_ line: String) -> String {
        let components = line.components(separatedBy: CharacterSet(charactersIn: ":- "))
        return components.last?.trimmingCharacters(in: .whitespaces) ?? "DA_VERIFICARE"
    }
    
    private func extractLocationFromLine(_ line: String) -> String {
        let components = line.components(separatedBy: CharacterSet(charactersIn: ":- "))
        return components.last?.trimmingCharacters(in: .whitespaces) ?? "DA_VERIFICARE"
    }
    
    private func extractCodeFromLine(_ line: String) -> String {
        // Cerca pattern codice fiscale (16 caratteri alfanumerici)
        let pattern = "[A-Z]{6}[0-9]{2}[A-Z][0-9]{2}[A-Z][0-9]{3}[A-Z]"
        if let range = line.range(of: pattern, options: .regularExpression) {
            return String(line[range])
        }
        return ""
    }
    
    private func extractPhoneFromLine(_ line: String) -> String {
        // Cerca pattern telefono
        let pattern = "\\+?[0-9\\s\\-\\.\\(\\)]{8,15}"
        if let range = line.range(of: pattern, options: .regularExpression) {
            return String(line[range]).trimmingCharacters(in: .whitespaces)
        }
        return ""
    }
    
    // MARK: - Document Enhancement
    
    func enhanceDocument(_ content: String) async throws -> String {
        let enhancePrompt = """
        Migliora il seguente documento mantenendo il contenuto originale ma migliorando:
        - Formattazione e struttura
        - Chiarezza del linguaggio
        - Completezza delle informazioni
        - Correttezza grammaticale
        
        Documento originale:
        \(content)
        """
        
        return try await processText(prompt: enhancePrompt)
    }
    
    // MARK: - Statistics and Usage
    
    func getUsageStatistics() -> SimpleAIUsageStats {
        return SimpleAIUsageStats(
            totalRequests: Int.random(in: 50...200),
            totalTokens: Int.random(in: 5000...20000),
            averageResponseTime: Double.random(in: 1.5...3.0),
            estimatedCost: 0.0, // Gratuito per la versione demo
            successRate: Double.random(in: 0.85...0.98)
        )
    }
    
    func testConnection() async throws -> Bool {
        await MainActor.run {
            isProcessing = true
            processingMessage = "Test connessione AI..."
        }
        
        // Simula test di connessione
        try await Task.sleep(nanoseconds: 2_000_000_000)
        
        await MainActor.run {
            isProcessing = false
            processingMessage = ""
        }
        
        // Simula successo con probabilit√† alta
        return Bool.random() ? true : true // Sempre true per demo
    }
    
    // MARK: - Mock Data Generators
    
    static func generateMockDefuntoData() -> [String: String] {
        let nomi = ["MARIO", "LUIGI", "GIUSEPPE", "FRANCESCO", "ANTONIO", "GIOVANNI", "ANNA", "MARIA", "GIULIA", "FRANCESCA"]
        let cognomi = ["ROSSI", "VERDI", "BIANCHI", "NERI", "FERRARI", "ROMANO", "GALLI", "CONTI", "RICCI", "MARINO"]
        let citta = ["ROMA", "MILANO", "NAPOLI", "TORINO", "PALERMO", "GENOVA", "BOLOGNA", "FIRENZE", "BARI", "CATANIA"]
        
        return [
            "nome": nomi.randomElement()!,
            "cognome": cognomi.randomElement()!,
            "luogoNascita": citta.randomElement()!,
            "codiceFiscale": generateMockCodiceFiscale(),
            "telefonoFamiliare": generateMockPhone(),
            "oraDecesso": generateMockTime()
        ]
    }
    
    private static func generateMockCodiceFiscale() -> String {
        let letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let numbers = "0123456789"
        
        var cf = ""
        // 6 lettere
        for _ in 0..<6 {
            cf += String(letters.randomElement()!)
        }
        // 2 numeri
        for _ in 0..<2 {
            cf += String(numbers.randomElement()!)
        }
        // 1 lettera
        cf += String(letters.randomElement()!)
        // 2 numeri
        for _ in 0..<2 {
            cf += String(numbers.randomElement()!)
        }
        // 1 lettera
        cf += String(letters.randomElement()!)
        // 3 numeri
        for _ in 0..<3 {
            cf += String(numbers.randomElement()!)
        }
        // 1 lettera
        cf += String(letters.randomElement()!)
        
        return cf
    }
    
    private static func generateMockPhone() -> String {
        return "+39 3\(Int.random(in: 20...99)) \(Int.random(in: 100...999)) \(Int.random(in: 1000...9999))"
    }
    
    private static func generateMockTime() -> String {
        let hour = Int.random(in: 0...23)
        let minute = Int.random(in: 0...59)
        return String(format: "%02d:%02d", hour, minute)
    }
}

// MARK: - Supporting Types

struct SimpleAIUsageStats {
    let totalRequests: Int
    let totalTokens: Int
    let averageResponseTime: Double
    let estimatedCost: Double
    let successRate: Double
}
