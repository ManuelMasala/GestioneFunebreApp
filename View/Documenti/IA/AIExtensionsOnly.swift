//
//  AIExtensionsOnly.swift
//  GestioneFunebreApp
//
//  Created by Manuel Masala on 22/07/25.
//

import SwiftUI
import Foundation

// MARK: - ⭐ ESTENSIONI COMPATIBILI (per i tuoi tipi esistenti)

// Estendo il tuo DocumentoTemplate esistente con funzionalità AI
extension DocumentoTemplate {
    // ⭐ Proprietà AI - riconosce template generati da AI
    var isAIGenerated: Bool {
        return nome.contains("(AI)") ||
               nome.contains("AI-") ||
               contenuto.contains("Generato da AI") ||
               contenuto.contains("Generated by AI") ||
               contenuto.contains("🧠") ||
               operatoreCreazione.contains("AI")
    }
    
    // ⭐ Estrae confidence se presente nel contenuto
    var aiConfidence: Double? {
        let pattern = #"Confidence:\s*(\d+)%"#
        if let range = contenuto.range(of: pattern, options: .regularExpression) {
            let confidenceStr = String(contenuto[range])
                .replacingOccurrences(of: "Confidence: ", with: "")
                .replacingOccurrences(of: "%", with: "")
            return Double(confidenceStr).map { $0 / 100.0 }
        }
        return nil
    }
    
    // ⭐ Categorizzazione per AI (usa i tuoi tipi esistenti)
    var isPersonalizzato: Bool {
        return !isDefault
    }
    
    // ⭐ Metodo per marcare come AI generated
    mutating func markAsAIGenerated(confidence: Double = 1.0) {
        if !nome.contains("(AI)") {
            nome = "\(nome) (AI)"
        }
        
        if !contenuto.contains("Generato da AI") {
            let confidencePercent = Int(confidence * 100)
            contenuto = "🧠 Generato da AI - Confidence: \(confidencePercent)%\n\n" + contenuto
        }
        
        // Aggiorna metadati
        operatoreCreazione = "AI Assistant"
        dataUltimaModifica = Date()
    }
}

// Estendo il tuo PersonaDefunta esistente
extension PersonaDefunta {
    // ⭐ Controlla se è stata migliorata con AI (usa il campo note esistente)
    var isAIEnhanced: Bool {
        return note?.contains("AI") == true ||
               note?.contains("🧠") == true ||
               operatoreCreazione.contains("AI")
    }
    
    // ⭐ Metodo per marcare come AI enhanced
    mutating func markAsAIEnhanced() {
        if let existingNote = note {
            if !existingNote.contains("AI Enhanced") {
                note = "🧠 AI Enhanced - \(existingNote)"
            }
        } else {
            note = "🧠 AI Enhanced - Auto-completamento dati"
        }
        operatoreCreazione = "AI Assistant"
        dataUltimaModifica = Date()
    }
}

// Estendo il tuo DocumentoCompilato esistente
extension DocumentoCompilato {
    var isAIEnhanced: Bool {
        return template.isAIGenerated ||
               contenutoFinale.contains("Enhanced by AI") ||
               note.contains("AI") ||
               operatoreCreazione.contains("AI")
    }
}

// MARK: - ⭐ COMPONENTI UI COMPATIBILI (nomi unici)

struct CompatibleAIStatusBar: View {
    let isConfigured: Bool
    let isProcessing: Bool
    let currentTask: String
    
    var body: some View {
        HStack(spacing: 6) {
            Circle()
                .fill(isConfigured ? .green : .red)
                .frame(width: 8, height: 8)
            
            if isProcessing {
                ProgressView()
                    .scaleEffect(0.7)
                Text(currentTask)
                    .font(.caption)
                    .foregroundColor(.blue)
            } else {
                Image(systemName: "brain.head.profile")
                    .font(.caption)
                    .foregroundColor(.purple)
                Text("AI Ready")
                    .font(.caption)
                    .foregroundColor(.purple)
            }
        }
        .padding(.horizontal, 10)
        .padding(.vertical, 6)
        .background(Color.purple.opacity(0.1))
        .cornerRadius(8)
    }
}

struct CompatibleAIQuickButtons: View {
    let isEnabled: Bool
    let isProcessing: Bool
    let hasDefunto: Bool
    let onAutoFill: () -> Void
    let onSuggest: () -> Void
    let onDuplicates: () -> Void
    
    var body: some View {
        if isEnabled && !isProcessing {
            HStack(spacing: 8) {
                Button("🧠 Auto-Fill") {
                    onAutoFill()
                }
                .help("Auto-completamento AI")
                .disabled(!hasDefunto)
                
                Button("💡 Suggerisci") {
                    onSuggest()
                }
                .help("Suggerimenti AI")
                .disabled(!hasDefunto)
                
                Button("🔍 Duplicati") {
                    onDuplicates()
                }
                .help("Controllo duplicati")
                .disabled(!hasDefunto)
            }
            .font(.caption)
            .buttonStyle(.borderless)
        }
    }
}

struct CompatibleAIBadge: View {
    let template: DocumentoTemplate
    
    var body: some View {
        if template.isAIGenerated {
            HStack(spacing: 4) {
                Image(systemName: "brain.head.profile")
                    .font(.caption2)
                    .foregroundColor(.purple)
                
                if let confidence = template.aiConfidence {
                    Text("\(Int(confidence * 100))%")
                        .font(.caption2)
                        .foregroundColor(.purple)
                } else {
                    Text("AI")
                        .font(.caption2)
                        .foregroundColor(.purple)
                }
            }
        }
    }
}

struct CompatibleAITypeLabel: View {
    let template: DocumentoTemplate
    
    var body: some View {
        Text(template.isAIGenerated ? "AI" : (template.isPersonalizzato ? "CUSTOM" : "DEFAULT"))
            .font(.caption2)
            .padding(.horizontal, 4)
            .padding(.vertical, 2)
            .background(template.isAIGenerated ? Color.purple : (template.isPersonalizzato ? Color.orange : Color.gray))
            .foregroundColor(.white)
            .cornerRadius(3)
    }
}

struct CompatibleAIEnhanceButton: View {
    let isEnabled: Bool
    let isProcessing: Bool
    let isAlreadyAI: Bool
    let onEnhance: () -> Void
    
    var body: some View {
        if isEnabled && !isAlreadyAI {
            Button("🧠") {
                onEnhance()
            }
            .help("Migliora con AI")
            .padding(4)
            .background(Color.purple.opacity(0.8))
            .foregroundColor(.white)
            .cornerRadius(4)
            .disabled(isProcessing)
        }
    }
}

// MARK: - ⭐ FUNZIONI HELPER COMPATIBILI

struct CompatibleAIHelpers {
    // Conta documenti AI usando i tuoi tipi
    static func countAITemplates(in templates: [DocumentoTemplate]) -> Int {
        return templates.filter(\.isAIGenerated).count
    }
    
    // Ordina template mettendo AI per primi
    static func sortTemplatesWithAI(_ templates: [DocumentoTemplate]) -> [DocumentoTemplate] {
        return templates.sorted { template1, template2 in
            if template1.isAIGenerated && !template2.isAIGenerated {
                return true
            } else if !template1.isAIGenerated && template2.isAIGenerated {
                return false
            }
            return template1.nome < template2.nome
        }
    }
    
    // Analizza qualità documenti AI usando i tuoi tipi
    static func analyzeAIQuality(documents: [DocumentoCompilato]) -> (aiCount: Int, totalCount: Int, percentage: Double) {
        let aiDocs = documents.filter { $0.template.isAIGenerated }
        let totalDocs = documents.count
        let percentage = totalDocs > 0 ? (Double(aiDocs.count) / Double(totalDocs)) * 100 : 0
        
        return (aiDocs.count, totalDocs, percentage)
    }
    
    // Filtra per tipo usando il tuo enum TipoDocumento
    static func filterByType(_ templates: [DocumentoTemplate], tipo: TipoDocumento) -> [DocumentoTemplate] {
        return templates.filter { $0.tipo == tipo }
    }
    
    // Raggruppa per categoria
    static func groupByType(_ templates: [DocumentoTemplate]) -> [TipoDocumento: [DocumentoTemplate]] {
        return Dictionary(grouping: templates, by: { $0.tipo })
    }
}

// MARK: - ⭐ MOCK AI MANAGER COMPATIBILE

@MainActor
class CompatibleAIManager: ObservableObject {
    @Published var isConfigured = true
    @Published var isProcessing = false
    @Published var currentTask = ""
    
    func simulateAIProcess(task: String, duration: UInt64 = 2_000_000_000) async {
        isProcessing = true
        currentTask = task
        
        try? await Task.sleep(nanoseconds: duration)
        
        isProcessing = false
        currentTask = ""
    }
    
    // ⭐ Auto-complete usando i tuoi tipi PersonaDefunta
    func autoCompleteDefunto(_ defunto: PersonaDefunta) async -> PersonaDefunta {
        var enhanced = defunto
        
        // Auto-complete codice fiscale se vuoto
        if enhanced.codiceFiscale.isEmpty {
            let prefix = String(enhanced.cognome.prefix(3)).uppercased()
            let suffix = String(enhanced.nome.prefix(3)).uppercased()
            enhanced.codiceFiscale = "\(prefix)\(suffix)85M01H501Z"
        }
        
        // Auto-complete luogo nascita se vuoto
        if enhanced.luogoNascita.isEmpty {
            enhanced.luogoNascita = "CAGLIARI (CA)"
        }
        
        // Auto-complete CAP se vuoto
        if enhanced.capResidenza.isEmpty || enhanced.capResidenza == "00000" {
            enhanced.capResidenza = "09123"
        }
        
        // Marca come AI enhanced
        enhanced.markAsAIEnhanced()
        
        return enhanced
    }
    
    // ⭐ Genera template usando i tuoi tipi
    func generateAITemplate(for defunto: PersonaDefunta) async -> DocumentoTemplate {
        let templateName = defunto.sesso == .maschio ? "AI-Comunicazione Maschile" : "AI-Comunicazione Femminile"
        let content = generateTemplateContent(for: defunto)
        
        var template = DocumentoTemplate(
            nome: templateName,
            tipo: .comunicazioneParrocchia,
            contenuto: content,
            operatoreCreazione: "AI Assistant"
        )
        
        template.markAsAIGenerated(confidence: 0.9)
        return template
    }
    
    // ⭐ Trova duplicati usando i tuoi tipi
    func findDuplicates(_ defunto: PersonaDefunta, in defunti: [PersonaDefunta]) async -> [PersonaDefunta] {
        var duplicates: [PersonaDefunta] = []
        
        for existing in defunti {
            guard existing.id != defunto.id else { continue }
            
            let similarity = calculateSimilarity(defunto, existing)
            if similarity > 0.7 {
                duplicates.append(existing)
            }
        }
        
        return duplicates
    }
    
    // ⭐ Suggerisci template basati sui tuoi enum
    func suggestTemplatesForType(_ tipo: TipoDocumento) async -> [DocumentoTemplate] {
        var suggestions: [DocumentoTemplate] = []
        
        switch tipo {
        case .autorizzazioneTrasporto:
            let template1 = DocumentoTemplate(
                nome: "AI-Autorizzazione Trasporto Veloce",
                tipo: .autorizzazioneTrasporto,
                contenuto: generateTransportContent(),
                operatoreCreazione: "AI Assistant"
            )
            suggestions.append(template1)
            
        case .comunicazioneParrocchia:
            let template2 = DocumentoTemplate(
                nome: "AI-Comunicazione Parrocchia Standard",
                tipo: .comunicazioneParrocchia,
                contenuto: generateChurchContent(),
                operatoreCreazione: "AI Assistant"
            )
            suggestions.append(template2)
            
        case .checklistFunerale:
            let template3 = DocumentoTemplate(
                nome: "AI-Checklist Completa",
                tipo: .checklistFunerale,
                contenuto: generateChecklistContent(),
                operatoreCreazione: "AI Assistant"
            )
            suggestions.append(template3)
            
        default:
            let genericTemplate = DocumentoTemplate(
                nome: "AI-Template Generico",
                tipo: tipo,
                contenuto: generateGenericContent(for: tipo),
                operatoreCreazione: "AI Assistant"
            )
            suggestions.append(genericTemplate)
        }
        
        // Marca tutti come AI generated
        for i in suggestions.indices {
            suggestions[i].markAsAIGenerated(confidence: 0.85)
        }
        
        return suggestions
    }
    
    // MARK: - Helper Methods Private
    
    private func generateTemplateContent(for defunto: PersonaDefunta) -> String {
        let prefix = defunto.sesso == .maschio ? "Sig." : "Sig.ra"
        
        return """
        🧠 Template AI Personalizzato - Confidence: 90%
        
        COMUNICAZIONE DI DECESSO
        
        Si comunica che il \(prefix) {{NOME_DEFUNTO}} {{COGNOME_DEFUNTO}},
        nato/a a {{LUOGO_NASCITA_DEFUNTO}} il {{DATA_NASCITA_DEFUNTO}},
        è deceduto/a il {{DATA_DECESSO}} presso {{LUOGO_DECESSO}}.
        
        Il funerale si terrà il {{DATA_FUNERALE}} alle ore {{ORA_FUNERALE}}
        presso {{CHIESA_FUNERALE}}.
        
        La famiglia ringrazia quanti parteciperanno al dolore.
        
        ---
        Template generato automaticamente dall'AI Assistant
        Numero Cartella: {{NUMERO_CARTELLA}}
        """
    }
    
    private func generateTransportContent() -> String {
        return """
        🧠 Autorizzazione AI - Confidence: 85%
        
        AUTORIZZAZIONE TRASPORTO FUNEBRE
        
        Il sottoscritto {{NOME_RICHIEDENTE}} {{COGNOME_RICHIEDENTE}}
        AUTORIZZA il trasporto della salma di {{NOME_DEFUNTO}} {{COGNOME_DEFUNTO}}
        
        Mezzo: {{MEZZO_TARGA}}
        Autista: {{NOME_AUTISTA}}
        Data: {{DATA_TRASPORTO}}
        Destinazione: {{LUOGO_DESTINAZIONE}}
        
        ---
        Generato da AI Assistant
        """
    }
    
    private func generateChurchContent() -> String {
        return """
        🧠 Comunicazione AI - Confidence: 90%
        
        SPETT. {{NOME_PARROCCHIA}}
        
        Si comunica funerale di {{NOME_DEFUNTO}} {{COGNOME_DEFUNTO}}
        Data: {{DATA_FUNERALE}} ore {{ORA_FUNERALE}}
        
        Famiglia: {{NOME_FAMILIARE}} {{COGNOME_FAMILIARE}}
        Tel: {{TELEFONO_FAMILIARE}}
        
        ---
        AI Assistant Template
        """
    }
    
    private func generateChecklistContent() -> String {
        return """
        🧠 Checklist AI - Confidence: 85%
        
        CHECKLIST FUNERALE - {{NOME_DEFUNTO}} {{COGNOME_DEFUNTO}}
        
        DOCUMENTI:
        ☐ Certificato di morte
        ☐ Autorizzazione trasporto
        ☐ Documento identità
        
        TRASPORTO:
        ☐ Mezzo: {{MEZZO_TARGA}}
        ☐ Autista: {{NOME_AUTISTA}}
        ☐ Data: {{DATA_TRASPORTO}}
        
        CERIMONIA:
        ☐ Chiesa: {{NOME_PARROCCHIA}}
        ☐ Orario: {{ORA_FUNERALE}}
        
        ---
        Checklist AI Assistant
        """
    }
    
    private func generateGenericContent(for tipo: TipoDocumento) -> String {
        return """
        🧠 Template AI - \(tipo.rawValue) - Confidence: 80%
        
        DOCUMENTO: \(tipo.rawValue.uppercased())
        
        Defunto: {{NOME_DEFUNTO}} {{COGNOME_DEFUNTO}}
        Cartella: {{NUMERO_CARTELLA}}
        Data: {{DATA_CORRENTE}}
        
        [Contenuto personalizzabile per \(tipo.rawValue)]
        
        ---
        Generato automaticamente da AI Assistant
        """
    }
    
    private func calculateSimilarity(_ defunto1: PersonaDefunta, _ defunto2: PersonaDefunta) -> Double {
        var score = 0.0
        var factors = 0
        
        // Nome similarity
        if !defunto1.nome.isEmpty && !defunto2.nome.isEmpty {
            score += stringSimilarity(defunto1.nome, defunto2.nome) * 0.3
            factors += 1
        }
        
        // Cognome similarity
        if !defunto1.cognome.isEmpty && !defunto2.cognome.isEmpty {
            score += stringSimilarity(defunto1.cognome, defunto2.cognome) * 0.4
            factors += 1
        }
        
        // Codice Fiscale exact match
        if !defunto1.codiceFiscale.isEmpty && !defunto2.codiceFiscale.isEmpty {
            score += (defunto1.codiceFiscale == defunto2.codiceFiscale) ? 1.0 : 0.0
            factors += 1
        }
        
        // Data nascita similarity
        let daysDifference = abs(Calendar.current.dateComponents([.day], from: defunto1.dataNascita, to: defunto2.dataNascita).day ?? 365)
        if daysDifference < 30 { // Simili se entro 30 giorni
            score += 0.2
            factors += 1
        }
        
        return factors > 0 ? score / Double(factors) : 0.0
    }
    
    private func stringSimilarity(_ str1: String, _ str2: String) -> Double {
        let s1 = str1.lowercased()
        let s2 = str2.lowercased()
        
        if s1 == s2 { return 1.0 }
        
        // Simplified Levenshtein-like similarity
        let commonChars = Set(s1).intersection(Set(s2)).count
        let maxLength = max(s1.count, s2.count)
        return maxLength > 0 ? Double(commonChars) / Double(maxLength) : 0.0
    }
}
